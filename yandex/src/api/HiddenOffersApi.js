/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddHiddenOffersRequest from '../model/AddHiddenOffersRequest';
import ApiClientDataErrorResponse from '../model/ApiClientDataErrorResponse';
import ApiForbiddenErrorResponse from '../model/ApiForbiddenErrorResponse';
import ApiLimitErrorResponse from '../model/ApiLimitErrorResponse';
import ApiLockedErrorResponse from '../model/ApiLockedErrorResponse';
import ApiNotFoundErrorResponse from '../model/ApiNotFoundErrorResponse';
import ApiServerErrorResponse from '../model/ApiServerErrorResponse';
import ApiUnauthorizedErrorResponse from '../model/ApiUnauthorizedErrorResponse';
import DeleteHiddenOffersRequest from '../model/DeleteHiddenOffersRequest';
import EmptyApiResponse from '../model/EmptyApiResponse';
import GetHiddenOffersResponse from '../model/GetHiddenOffersResponse';

/**
* HiddenOffers service.
* @module api/HiddenOffersApi
* @version LATEST
*/
export default class HiddenOffersApi {

    /**
    * Constructs a new HiddenOffersApi. 
    * @alias module:api/HiddenOffersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addHiddenOffers operation.
     * @callback module:api/HiddenOffersApi~addHiddenOffersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmptyApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Скрытие товаров и настройки скрытия
     * {% include notitle [access](../../_auto/method_scopes/addHiddenOffers.md) %}  Скрывает товары магазина на Маркете.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 10 000 товаров в минуту| |-| 
     * @param {Number} campaignId Идентификатор магазина в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param {module:model/AddHiddenOffersRequest} addHiddenOffersRequest Запрос на скрытие оферов.
     * @param {module:api/HiddenOffersApi~addHiddenOffersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmptyApiResponse}
     */
    addHiddenOffers(campaignId, addHiddenOffersRequest, callback) {
      let postBody = addHiddenOffersRequest;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling addHiddenOffers");
      }
      // verify the required parameter 'addHiddenOffersRequest' is set
      if (addHiddenOffersRequest === undefined || addHiddenOffersRequest === null) {
        throw new Error("Missing the required parameter 'addHiddenOffersRequest' when calling addHiddenOffers");
      }

      let pathParams = {
        'campaignId': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmptyApiResponse;
      return this.apiClient.callApi(
        '/campaigns/{campaignId}/hidden-offers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteHiddenOffers operation.
     * @callback module:api/HiddenOffersApi~deleteHiddenOffersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmptyApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Возобновление показа товаров
     * {% include notitle [access](../../_auto/method_scopes/deleteHiddenOffers.md) %}  Возобновляет показ скрытых вами товаров магазина на Маркете.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 10 000 товаров в минуту| |-| 
     * @param {Number} campaignId Идентификатор магазина в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param {module:model/DeleteHiddenOffersRequest} deleteHiddenOffersRequest Запрос на возобновление показа оферов.
     * @param {module:api/HiddenOffersApi~deleteHiddenOffersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmptyApiResponse}
     */
    deleteHiddenOffers(campaignId, deleteHiddenOffersRequest, callback) {
      let postBody = deleteHiddenOffersRequest;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling deleteHiddenOffers");
      }
      // verify the required parameter 'deleteHiddenOffersRequest' is set
      if (deleteHiddenOffersRequest === undefined || deleteHiddenOffersRequest === null) {
        throw new Error("Missing the required parameter 'deleteHiddenOffersRequest' when calling deleteHiddenOffers");
      }

      let pathParams = {
        'campaignId': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmptyApiResponse;
      return this.apiClient.callApi(
        '/campaigns/{campaignId}/hidden-offers/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHiddenOffers operation.
     * @callback module:api/HiddenOffersApi~getHiddenOffersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetHiddenOffersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Информация о скрытых вами товарах
     * {% include notitle [access](../../_auto/method_scopes/getHiddenOffers.md) %}  Возвращает список скрытых вами товаров для заданного магазина.  В списке будут товары, скрытые любым способом — по API, с помощью YML-фида, в кабинете и так далее.  |**⚙️ Лимит:** 10 000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
     * @param {Number} campaignId Идентификатор магазина в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [offerId] Идентификатор скрытого предложения. 
     * @param {String} [pageToken] Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `page_number` и `page_size`, они игнорируются. 
     * @param {Number} [limit] Количество значений на одной странице. 
     * @param {Number} [page = 1)] {% note warning \"Если в методе есть `page_token`\" %}  Используйте его вместо параметра `page`.  [Подробнее о типах пагинации и их использовании](../../concepts/pagination.md)  {% endnote %}  Номер страницы результатов.  Используется вместе с параметром `page_size`.  `page_number` игнорируется, если задан `page_token` или `limit`. 
     * @param {Number} [pageSize] Размер страницы.  Используется вместе с параметром `page_number`.  `page_size` игнорируется, если задан `page_token` или `limit`. 
     * @param {module:api/HiddenOffersApi~getHiddenOffersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetHiddenOffersResponse}
     */
    getHiddenOffers(campaignId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getHiddenOffers");
      }

      let pathParams = {
        'campaignId': campaignId
      };
      let queryParams = {
        'offer_id': this.apiClient.buildCollectionParam(opts['offerId'], 'csv'),
        'page_token': opts['pageToken'],
        'limit': opts['limit'],
        'page': opts['page'],
        'pageSize': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetHiddenOffersResponse;
      return this.apiClient.callApi(
        '/campaigns/{campaignId}/hidden-offers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
