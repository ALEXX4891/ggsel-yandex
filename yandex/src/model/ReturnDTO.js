/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CurrencyValueDTO from './CurrencyValueDTO';
import LogisticPickupPointDTO from './LogisticPickupPointDTO';
import RecipientType from './RecipientType';
import RefundStatusType from './RefundStatusType';
import ReturnItemDTO from './ReturnItemDTO';
import ReturnShipmentStatusType from './ReturnShipmentStatusType';
import ReturnType from './ReturnType';

/**
 * The ReturnDTO model module.
 * @module model/ReturnDTO
 * @version LATEST
 */
class ReturnDTO {
    /**
     * Constructs a new <code>ReturnDTO</code>.
     * Невыкуп или возврат в заказе.  Параметров &#x60;logisticPickupPoint&#x60;, &#x60;shipmentRecipientType&#x60; и &#x60;shipmentStatus&#x60; может не быть в случае возврата:   * С опцией **Быстрый возврат денег за дешевый брак**, когда товар остается у покупателя (&#x60;fastReturn&#x3D;true&#x60;).   * По заказу от бизнеса, если:     * статус возврата &#x60;STARTED_BY_USER&#x60; или &#x60;WAITING_FOR_DECISION&#x60;;     * возврат отменен до передачи товара.  Статус возврата денег &#x60;refundStatus&#x60; актуален только для &#x60;returnType&#x3D;RETURN&#x60;. 
     * @alias module:model/ReturnDTO
     * @param id {Number} Идентификатор невыкупа или возврата.
     * @param orderId {Number} Номер заказа.
     * @param items {Array.<module:model/ReturnItemDTO>} Список товаров в невыкупе или возврате.
     * @param returnType {module:model/ReturnType} 
     */
    constructor(id, orderId, items, returnType) { 
        
        ReturnDTO.initialize(this, id, orderId, items, returnType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, orderId, items, returnType) { 
        obj['id'] = id;
        obj['orderId'] = orderId;
        obj['items'] = items;
        obj['returnType'] = returnType;
    }

    /**
     * Constructs a <code>ReturnDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReturnDTO} obj Optional instance to populate.
     * @return {module:model/ReturnDTO} The populated <code>ReturnDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReturnDTO();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('orderId')) {
                obj['orderId'] = ApiClient.convertToType(data['orderId'], 'Number');
            }
            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'Date');
            }
            if (data.hasOwnProperty('updateDate')) {
                obj['updateDate'] = ApiClient.convertToType(data['updateDate'], 'Date');
            }
            if (data.hasOwnProperty('refundStatus')) {
                obj['refundStatus'] = RefundStatusType.constructFromObject(data['refundStatus']);
            }
            if (data.hasOwnProperty('logisticPickupPoint')) {
                obj['logisticPickupPoint'] = LogisticPickupPointDTO.constructFromObject(data['logisticPickupPoint']);
            }
            if (data.hasOwnProperty('shipmentRecipientType')) {
                obj['shipmentRecipientType'] = RecipientType.constructFromObject(data['shipmentRecipientType']);
            }
            if (data.hasOwnProperty('shipmentStatus')) {
                obj['shipmentStatus'] = ReturnShipmentStatusType.constructFromObject(data['shipmentStatus']);
            }
            if (data.hasOwnProperty('refundAmount')) {
                obj['refundAmount'] = ApiClient.convertToType(data['refundAmount'], 'Number');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = CurrencyValueDTO.constructFromObject(data['amount']);
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [ReturnItemDTO]);
            }
            if (data.hasOwnProperty('returnType')) {
                obj['returnType'] = ReturnType.constructFromObject(data['returnType']);
            }
            if (data.hasOwnProperty('fastReturn')) {
                obj['fastReturn'] = ApiClient.convertToType(data['fastReturn'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReturnDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReturnDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ReturnDTO.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `logisticPickupPoint`
        if (data['logisticPickupPoint']) { // data not null
          LogisticPickupPointDTO.validateJSON(data['logisticPickupPoint']);
        }
        // validate the optional field `amount`
        if (data['amount']) { // data not null
          CurrencyValueDTO.validateJSON(data['amount']);
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                ReturnItemDTO.validateJSON(item);
            };
        }

        return true;
    }


}

ReturnDTO.RequiredProperties = ["id", "orderId", "items", "returnType"];

/**
 * Идентификатор невыкупа или возврата.
 * @member {Number} id
 */
ReturnDTO.prototype['id'] = undefined;

/**
 * Номер заказа.
 * @member {Number} orderId
 */
ReturnDTO.prototype['orderId'] = undefined;

/**
 * Дата создания невыкупа или возврата клиентом.  Формат даты: ISO 8601 со смещением относительно UTC. 
 * @member {Date} creationDate
 */
ReturnDTO.prototype['creationDate'] = undefined;

/**
 * Дата обновления невыкупа или возврата.  Формат даты: ISO 8601 со смещением относительно UTC. 
 * @member {Date} updateDate
 */
ReturnDTO.prototype['updateDate'] = undefined;

/**
 * @member {module:model/RefundStatusType} refundStatus
 */
ReturnDTO.prototype['refundStatus'] = undefined;

/**
 * @member {module:model/LogisticPickupPointDTO} logisticPickupPoint
 */
ReturnDTO.prototype['logisticPickupPoint'] = undefined;

/**
 * @member {module:model/RecipientType} shipmentRecipientType
 */
ReturnDTO.prototype['shipmentRecipientType'] = undefined;

/**
 * @member {module:model/ReturnShipmentStatusType} shipmentStatus
 */
ReturnDTO.prototype['shipmentStatus'] = undefined;

/**
 * {% note warning \"Этот параметр устарел\" %}  Вместо него используйте `amount`.  {% endnote %}  Сумма возврата в копейках. 
 * @member {Number} refundAmount
 */
ReturnDTO.prototype['refundAmount'] = undefined;

/**
 * @member {module:model/CurrencyValueDTO} amount
 */
ReturnDTO.prototype['amount'] = undefined;

/**
 * Список товаров в невыкупе или возврате.
 * @member {Array.<module:model/ReturnItemDTO>} items
 */
ReturnDTO.prototype['items'] = undefined;

/**
 * @member {module:model/ReturnType} returnType
 */
ReturnDTO.prototype['returnType'] = undefined;

/**
 * Используется ли опция **Быстрый возврат денег за дешевый брак**.  Актуально только для `returnType=RETURN`. 
 * @member {Boolean} fastReturn
 */
ReturnDTO.prototype['fastReturn'] = undefined;






export default ReturnDTO;

