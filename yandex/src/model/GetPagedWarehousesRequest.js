/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WarehouseComponentType from './WarehouseComponentType';

/**
 * The GetPagedWarehousesRequest model module.
 * @module model/GetPagedWarehousesRequest
 * @version LATEST
 */
class GetPagedWarehousesRequest {
    /**
     * Constructs a new <code>GetPagedWarehousesRequest</code>.
     * Запрос на получение складов кабинета.
     * @alias module:model/GetPagedWarehousesRequest
     */
    constructor() { 
        
        GetPagedWarehousesRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetPagedWarehousesRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetPagedWarehousesRequest} obj Optional instance to populate.
     * @return {module:model/GetPagedWarehousesRequest} The populated <code>GetPagedWarehousesRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetPagedWarehousesRequest();

            if (data.hasOwnProperty('components')) {
                obj['components'] = ApiClient.convertToType(data['components'], [WarehouseComponentType]);
            }
            if (data.hasOwnProperty('campaignIds')) {
                obj['campaignIds'] = ApiClient.convertToType(data['campaignIds'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetPagedWarehousesRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetPagedWarehousesRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['components'])) {
            throw new Error("Expected the field `components` to be an array in the JSON data but got " + data['components']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['campaignIds'])) {
            throw new Error("Expected the field `campaignIds` to be an array in the JSON data but got " + data['campaignIds']);
        }

        return true;
    }


}



/**
 * Свойства складов, которые необходимо вернуть. Если какое-то значение параметра не задано, этой информации в ответе не будет.  Передавайте параметр, только если нужна информация, которую он возвращает.  Можно передать сразу несколько значений. 
 * @member {Array.<module:model/WarehouseComponentType>} components
 */
GetPagedWarehousesRequest.prototype['components'] = undefined;

/**
 * Идентификаторы магазинов в кабинете, склады которых необходимо вернуть.
 * @member {Array.<Number>} campaignIds
 */
GetPagedWarehousesRequest.prototype['campaignIds'] = undefined;






export default GetPagedWarehousesRequest;

