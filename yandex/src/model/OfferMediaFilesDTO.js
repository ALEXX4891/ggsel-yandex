/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OfferMediaFileDTO from './OfferMediaFileDTO';

/**
 * The OfferMediaFilesDTO model module.
 * @module model/OfferMediaFilesDTO
 * @version LATEST
 */
class OfferMediaFilesDTO {
    /**
     * Constructs a new <code>OfferMediaFilesDTO</code>.
     * Информация о медиафайлах товара. 
     * @alias module:model/OfferMediaFilesDTO
     */
    constructor() { 
        
        OfferMediaFilesDTO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OfferMediaFilesDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OfferMediaFilesDTO} obj Optional instance to populate.
     * @return {module:model/OfferMediaFilesDTO} The populated <code>OfferMediaFilesDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OfferMediaFilesDTO();

            if (data.hasOwnProperty('firstVideoAsCover')) {
                obj['firstVideoAsCover'] = ApiClient.convertToType(data['firstVideoAsCover'], 'Boolean');
            }
            if (data.hasOwnProperty('videos')) {
                obj['videos'] = ApiClient.convertToType(data['videos'], [OfferMediaFileDTO]);
            }
            if (data.hasOwnProperty('pictures')) {
                obj['pictures'] = ApiClient.convertToType(data['pictures'], [OfferMediaFileDTO]);
            }
            if (data.hasOwnProperty('manuals')) {
                obj['manuals'] = ApiClient.convertToType(data['manuals'], [OfferMediaFileDTO]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OfferMediaFilesDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OfferMediaFilesDTO</code>.
     */
    static validateJSON(data) {
        if (data['videos']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['videos'])) {
                throw new Error("Expected the field `videos` to be an array in the JSON data but got " + data['videos']);
            }
            // validate the optional field `videos` (array)
            for (const item of data['videos']) {
                OfferMediaFileDTO.validateJSON(item);
            };
        }
        if (data['pictures']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pictures'])) {
                throw new Error("Expected the field `pictures` to be an array in the JSON data but got " + data['pictures']);
            }
            // validate the optional field `pictures` (array)
            for (const item of data['pictures']) {
                OfferMediaFileDTO.validateJSON(item);
            };
        }
        if (data['manuals']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['manuals'])) {
                throw new Error("Expected the field `manuals` to be an array in the JSON data but got " + data['manuals']);
            }
            // validate the optional field `manuals` (array)
            for (const item of data['manuals']) {
                OfferMediaFileDTO.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Использовать первое видео в карточке как видеообложку.  Передайте `true`, чтобы первое видео использовалось как видеообложка, или `false`, чтобы видеообложка не отображалась в карточке товара. 
 * @member {Boolean} firstVideoAsCover
 */
OfferMediaFilesDTO.prototype['firstVideoAsCover'] = undefined;

/**
 * Видеофайлы товара. 
 * @member {Array.<module:model/OfferMediaFileDTO>} videos
 */
OfferMediaFilesDTO.prototype['videos'] = undefined;

/**
 * Изображения товара. 
 * @member {Array.<module:model/OfferMediaFileDTO>} pictures
 */
OfferMediaFilesDTO.prototype['pictures'] = undefined;

/**
 * Руководства по использованию товара. 
 * @member {Array.<module:model/OfferMediaFileDTO>} manuals
 */
OfferMediaFilesDTO.prototype['manuals'] = undefined;






export default OfferMediaFilesDTO;

