/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrderItemDetailDTO from './OrderItemDetailDTO';
import OrderItemInstanceDTO from './OrderItemInstanceDTO';
import OrderItemInstanceType from './OrderItemInstanceType';
import OrderItemPromoDTO from './OrderItemPromoDTO';
import OrderItemSubsidyDTO from './OrderItemSubsidyDTO';
import OrderItemTagType from './OrderItemTagType';
import OrderVatType from './OrderVatType';

/**
 * The OrderItemDTO model module.
 * @module model/OrderItemDTO
 * @version LATEST
 */
class OrderItemDTO {
    /**
     * Constructs a new <code>OrderItemDTO</code>.
     * Список товаров в заказе.
     * @alias module:model/OrderItemDTO
     * @param id {Number} Идентификатор товара в заказе.  Позволяет идентифицировать товар в рамках данного заказа. 
     * @param offerId {String} Ваш SKU — идентификатор товара в вашей системе.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  SKU товара можно изменить в кабинете продавца на Маркете. О том, как это сделать, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/assortment/operations/edit-sku).  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
     * @param offerName {String} Название товара.
     * @param price {Number} Цена на товар в валюте заказа без учета вознаграждения партнеру за скидки по промокодам, купонам и акциям (параметр `subsidies`). 
     * @param buyerPrice {Number} Цена на товар в валюте покупателя. В цене уже учтены скидки по:  * акциям; * купонам; * промокодам. 
     * @param buyerPriceBeforeDiscount {Number} Стоимость товара в валюте покупателя до применения скидок по:  * акциям; * купонам; * промокодам. 
     * @param count {Number} Количество единиц товара.
     * @param vat {module:model/OrderVatType} 
     */
    constructor(id, offerId, offerName, price, buyerPrice, buyerPriceBeforeDiscount, count, vat) { 
        
        OrderItemDTO.initialize(this, id, offerId, offerName, price, buyerPrice, buyerPriceBeforeDiscount, count, vat);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, offerId, offerName, price, buyerPrice, buyerPriceBeforeDiscount, count, vat) { 
        obj['id'] = id;
        obj['offerId'] = offerId;
        obj['offerName'] = offerName;
        obj['price'] = price;
        obj['buyerPrice'] = buyerPrice;
        obj['buyerPriceBeforeDiscount'] = buyerPriceBeforeDiscount;
        obj['count'] = count;
        obj['vat'] = vat;
    }

    /**
     * Constructs a <code>OrderItemDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderItemDTO} obj Optional instance to populate.
     * @return {module:model/OrderItemDTO} The populated <code>OrderItemDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderItemDTO();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('offerId')) {
                obj['offerId'] = ApiClient.convertToType(data['offerId'], 'String');
            }
            if (data.hasOwnProperty('offerName')) {
                obj['offerName'] = ApiClient.convertToType(data['offerName'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('buyerPrice')) {
                obj['buyerPrice'] = ApiClient.convertToType(data['buyerPrice'], 'Number');
            }
            if (data.hasOwnProperty('buyerPriceBeforeDiscount')) {
                obj['buyerPriceBeforeDiscount'] = ApiClient.convertToType(data['buyerPriceBeforeDiscount'], 'Number');
            }
            if (data.hasOwnProperty('priceBeforeDiscount')) {
                obj['priceBeforeDiscount'] = ApiClient.convertToType(data['priceBeforeDiscount'], 'Number');
            }
            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('vat')) {
                obj['vat'] = OrderVatType.constructFromObject(data['vat']);
            }
            if (data.hasOwnProperty('shopSku')) {
                obj['shopSku'] = ApiClient.convertToType(data['shopSku'], 'String');
            }
            if (data.hasOwnProperty('subsidy')) {
                obj['subsidy'] = ApiClient.convertToType(data['subsidy'], 'Number');
            }
            if (data.hasOwnProperty('partnerWarehouseId')) {
                obj['partnerWarehouseId'] = ApiClient.convertToType(data['partnerWarehouseId'], 'String');
            }
            if (data.hasOwnProperty('promos')) {
                obj['promos'] = ApiClient.convertToType(data['promos'], [OrderItemPromoDTO]);
            }
            if (data.hasOwnProperty('instances')) {
                obj['instances'] = ApiClient.convertToType(data['instances'], [OrderItemInstanceDTO]);
            }
            if (data.hasOwnProperty('details')) {
                obj['details'] = ApiClient.convertToType(data['details'], [OrderItemDetailDTO]);
            }
            if (data.hasOwnProperty('subsidies')) {
                obj['subsidies'] = ApiClient.convertToType(data['subsidies'], [OrderItemSubsidyDTO]);
            }
            if (data.hasOwnProperty('requiredInstanceTypes')) {
                obj['requiredInstanceTypes'] = ApiClient.convertToType(data['requiredInstanceTypes'], [OrderItemInstanceType]);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [OrderItemTagType]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderItemDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderItemDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OrderItemDTO.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['offerId'] && !(typeof data['offerId'] === 'string' || data['offerId'] instanceof String)) {
            throw new Error("Expected the field `offerId` to be a primitive type in the JSON string but got " + data['offerId']);
        }
        // ensure the json data is a string
        if (data['offerName'] && !(typeof data['offerName'] === 'string' || data['offerName'] instanceof String)) {
            throw new Error("Expected the field `offerName` to be a primitive type in the JSON string but got " + data['offerName']);
        }
        // ensure the json data is a string
        if (data['shopSku'] && !(typeof data['shopSku'] === 'string' || data['shopSku'] instanceof String)) {
            throw new Error("Expected the field `shopSku` to be a primitive type in the JSON string but got " + data['shopSku']);
        }
        // ensure the json data is a string
        if (data['partnerWarehouseId'] && !(typeof data['partnerWarehouseId'] === 'string' || data['partnerWarehouseId'] instanceof String)) {
            throw new Error("Expected the field `partnerWarehouseId` to be a primitive type in the JSON string but got " + data['partnerWarehouseId']);
        }
        if (data['promos']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['promos'])) {
                throw new Error("Expected the field `promos` to be an array in the JSON data but got " + data['promos']);
            }
            // validate the optional field `promos` (array)
            for (const item of data['promos']) {
                OrderItemPromoDTO.validateJSON(item);
            };
        }
        if (data['instances']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['instances'])) {
                throw new Error("Expected the field `instances` to be an array in the JSON data but got " + data['instances']);
            }
            // validate the optional field `instances` (array)
            for (const item of data['instances']) {
                OrderItemInstanceDTO.validateJSON(item);
            };
        }
        if (data['details']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['details'])) {
                throw new Error("Expected the field `details` to be an array in the JSON data but got " + data['details']);
            }
            // validate the optional field `details` (array)
            for (const item of data['details']) {
                OrderItemDetailDTO.validateJSON(item);
            };
        }
        if (data['subsidies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['subsidies'])) {
                throw new Error("Expected the field `subsidies` to be an array in the JSON data but got " + data['subsidies']);
            }
            // validate the optional field `subsidies` (array)
            for (const item of data['subsidies']) {
                OrderItemSubsidyDTO.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['requiredInstanceTypes'])) {
            throw new Error("Expected the field `requiredInstanceTypes` to be an array in the JSON data but got " + data['requiredInstanceTypes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }

        return true;
    }


}

OrderItemDTO.RequiredProperties = ["id", "offerId", "offerName", "price", "buyerPrice", "buyerPriceBeforeDiscount", "count", "vat"];

/**
 * Идентификатор товара в заказе.  Позволяет идентифицировать товар в рамках данного заказа. 
 * @member {Number} id
 */
OrderItemDTO.prototype['id'] = undefined;

/**
 * Ваш SKU — идентификатор товара в вашей системе.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  SKU товара можно изменить в кабинете продавца на Маркете. О том, как это сделать, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/assortment/operations/edit-sku).  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
 * @member {String} offerId
 */
OrderItemDTO.prototype['offerId'] = undefined;

/**
 * Название товара.
 * @member {String} offerName
 */
OrderItemDTO.prototype['offerName'] = undefined;

/**
 * Цена на товар в валюте заказа без учета вознаграждения партнеру за скидки по промокодам, купонам и акциям (параметр `subsidies`). 
 * @member {Number} price
 */
OrderItemDTO.prototype['price'] = undefined;

/**
 * Цена на товар в валюте покупателя. В цене уже учтены скидки по:  * акциям; * купонам; * промокодам. 
 * @member {Number} buyerPrice
 */
OrderItemDTO.prototype['buyerPrice'] = undefined;

/**
 * Стоимость товара в валюте покупателя до применения скидок по:  * акциям; * купонам; * промокодам. 
 * @member {Number} buyerPriceBeforeDiscount
 */
OrderItemDTO.prototype['buyerPriceBeforeDiscount'] = undefined;

/**
 * {% note warning \"Этот параметр устарел\" %}  Не используйте его.  {% endnote %}  Стоимость товара в валюте магазина до применения скидок. 
 * @member {Number} priceBeforeDiscount
 */
OrderItemDTO.prototype['priceBeforeDiscount'] = undefined;

/**
 * Количество единиц товара.
 * @member {Number} count
 */
OrderItemDTO.prototype['count'] = undefined;

/**
 * @member {module:model/OrderVatType} vat
 */
OrderItemDTO.prototype['vat'] = undefined;

/**
 * Ваш SKU — идентификатор товара в вашей системе.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  SKU товара можно изменить в кабинете продавца на Маркете. О том, как это сделать, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/assortment/operations/edit-sku).  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
 * @member {String} shopSku
 */
OrderItemDTO.prototype['shopSku'] = undefined;

/**
 * {% note warning \"Этот параметр устарел\" %}  Вместо него используйте `subsidies`.  {% endnote %}  Общее вознаграждение партнеру за DBS-доставку и все скидки на товар:  * по промокодам; * по купонам; * по баллам Плюса; * по акциям. 
 * @member {Number} subsidy
 */
OrderItemDTO.prototype['subsidy'] = undefined;

/**
 * {% note warning \"Этот параметр устарел\" %}  Не используйте его.  {% endnote %}  Идентификатор склада в системе партнера, на который сформирован заказ. 
 * @member {String} partnerWarehouseId
 */
OrderItemDTO.prototype['partnerWarehouseId'] = undefined;

/**
 * Информация о вознаграждениях партнеру за скидки на товар по промокодам, купонам и акциям.
 * @member {Array.<module:model/OrderItemPromoDTO>} promos
 */
OrderItemDTO.prototype['promos'] = undefined;

/**
 * Информация о маркировке единиц товара.  Возвращаются данные для маркировки, переданные в запросе [PUT campaigns/{campaignId}/orders/{orderId}/identifiers](../../reference/orders/provideOrderItemIdentifiers.md).  Если магазин еще не передавал коды для этого заказа, `instances` отсутствует. 
 * @member {Array.<module:model/OrderItemInstanceDTO>} instances
 */
OrderItemDTO.prototype['instances'] = undefined;

/**
 * {% note warning \"Этот параметр устарел\" %}  Для получения информации о невыкупах и возвратах используйте [GET campaigns/{campaignId}/returns](../../reference/orders/getReturns.md).  {% endnote %}  Информация о невыкупленных или возвращенных товарах в заказе. 
 * @member {Array.<module:model/OrderItemDetailDTO>} details
 */
OrderItemDTO.prototype['details'] = undefined;

/**
 * Список субсидий по типам.
 * @member {Array.<module:model/OrderItemSubsidyDTO>} subsidies
 */
OrderItemDTO.prototype['subsidies'] = undefined;

/**
 * Список необходимых маркировок товара.
 * @member {Array.<module:model/OrderItemInstanceType>} requiredInstanceTypes
 */
OrderItemDTO.prototype['requiredInstanceTypes'] = undefined;

/**
 * Признаки товара.
 * @member {Array.<module:model/OrderItemTagType>} tags
 */
OrderItemDTO.prototype['tags'] = undefined;






export default OrderItemDTO;

