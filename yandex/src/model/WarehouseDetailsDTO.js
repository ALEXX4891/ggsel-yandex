/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WarehouseAddressDTO from './WarehouseAddressDTO';
import WarehouseGroupInfoDTO from './WarehouseGroupInfoDTO';
import WarehouseStatusDTO from './WarehouseStatusDTO';

/**
 * The WarehouseDetailsDTO model module.
 * @module model/WarehouseDetailsDTO
 * @version LATEST
 */
class WarehouseDetailsDTO {
    /**
     * Constructs a new <code>WarehouseDetailsDTO</code>.
     * Информация о складе.
     * @alias module:model/WarehouseDetailsDTO
     * @param id {Number} Идентификатор склада.
     * @param name {String} Название склада.
     * @param campaignId {Number} Идентификатор магазина, который связан со складом.
     * @param express {Boolean} Возможна ли доставка для модели Экспресс.
     */
    constructor(id, name, campaignId, express) { 
        
        WarehouseDetailsDTO.initialize(this, id, name, campaignId, express);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name, campaignId, express) { 
        obj['id'] = id;
        obj['name'] = name;
        obj['campaignId'] = campaignId;
        obj['express'] = express;
    }

    /**
     * Constructs a <code>WarehouseDetailsDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WarehouseDetailsDTO} obj Optional instance to populate.
     * @return {module:model/WarehouseDetailsDTO} The populated <code>WarehouseDetailsDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WarehouseDetailsDTO();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('campaignId')) {
                obj['campaignId'] = ApiClient.convertToType(data['campaignId'], 'Number');
            }
            if (data.hasOwnProperty('express')) {
                obj['express'] = ApiClient.convertToType(data['express'], 'Boolean');
            }
            if (data.hasOwnProperty('groupInfo')) {
                obj['groupInfo'] = WarehouseGroupInfoDTO.constructFromObject(data['groupInfo']);
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = WarehouseAddressDTO.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = WarehouseStatusDTO.constructFromObject(data['status']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WarehouseDetailsDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WarehouseDetailsDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WarehouseDetailsDTO.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `groupInfo`
        if (data['groupInfo']) { // data not null
          WarehouseGroupInfoDTO.validateJSON(data['groupInfo']);
        }
        // validate the optional field `address`
        if (data['address']) { // data not null
          WarehouseAddressDTO.validateJSON(data['address']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          WarehouseStatusDTO.validateJSON(data['status']);
        }

        return true;
    }


}

WarehouseDetailsDTO.RequiredProperties = ["id", "name", "campaignId", "express"];

/**
 * Идентификатор склада.
 * @member {Number} id
 */
WarehouseDetailsDTO.prototype['id'] = undefined;

/**
 * Название склада.
 * @member {String} name
 */
WarehouseDetailsDTO.prototype['name'] = undefined;

/**
 * Идентификатор магазина, который связан со складом.
 * @member {Number} campaignId
 */
WarehouseDetailsDTO.prototype['campaignId'] = undefined;

/**
 * Возможна ли доставка для модели Экспресс.
 * @member {Boolean} express
 */
WarehouseDetailsDTO.prototype['express'] = undefined;

/**
 * @member {module:model/WarehouseGroupInfoDTO} groupInfo
 */
WarehouseDetailsDTO.prototype['groupInfo'] = undefined;

/**
 * @member {module:model/WarehouseAddressDTO} address
 */
WarehouseDetailsDTO.prototype['address'] = undefined;

/**
 * @member {module:model/WarehouseStatusDTO} status
 */
WarehouseDetailsDTO.prototype['status'] = undefined;






export default WarehouseDetailsDTO;

