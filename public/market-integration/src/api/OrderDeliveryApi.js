/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiClientDataErrorResponse from '../model/ApiClientDataErrorResponse';
import ApiForbiddenErrorResponse from '../model/ApiForbiddenErrorResponse';
import ApiLimitErrorResponse from '../model/ApiLimitErrorResponse';
import ApiNotFoundErrorResponse from '../model/ApiNotFoundErrorResponse';
import ApiServerErrorResponse from '../model/ApiServerErrorResponse';
import ApiUnauthorizedErrorResponse from '../model/ApiUnauthorizedErrorResponse';
import EmptyApiResponse from '../model/EmptyApiResponse';
import GetOrderBuyerInfoResponse from '../model/GetOrderBuyerInfoResponse';
import SetOrderDeliveryDateRequest from '../model/SetOrderDeliveryDateRequest';
import SetOrderDeliveryTrackCodeRequest from '../model/SetOrderDeliveryTrackCodeRequest';
import UpdateOrderStorageLimitRequest from '../model/UpdateOrderStorageLimitRequest';
import VerifyOrderEacRequest from '../model/VerifyOrderEacRequest';
import VerifyOrderEacResponse from '../model/VerifyOrderEacResponse';

/**
* OrderDelivery service.
* @module api/OrderDeliveryApi
* @version LATEST
*/
export default class OrderDeliveryApi {

    /**
    * Constructs a new OrderDeliveryApi. 
    * @alias module:api/OrderDeliveryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getOrderBuyerInfo operation.
     * @callback module:api/OrderDeliveryApi~getOrderBuyerInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrderBuyerInfoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Информация о покупателе — физическом лице
     * {% include notitle [access](../../_auto/method_scopes/getOrderBuyerInfo.md) %}  Возвращает информацию о покупателе по идентификатору заказа.  {% note info \"Как получить информацию о покупателе, который является юридическим лицом\" %}  Воспользуйтесь запросом [POST campaigns/{campaignId}/orders/{orderId}/business-buyer](../../reference/order-business-information/getOrderBusinessBuyerInfo.md).  {% endnote %}  Получить данные можно, только если заказ находится в статусе `PROCESSING`, `DELIVERY` или `PICKUP`.  |**⚙️ Лимит:** 3 000 запросов в час| |-| 
     * @param {Number} campaignId Идентификатор магазина в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param {Number} orderId Идентификатор заказа.
     * @param {module:api/OrderDeliveryApi~getOrderBuyerInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrderBuyerInfoResponse}
     */
    getOrderBuyerInfo(campaignId, orderId, callback) {
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getOrderBuyerInfo");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling getOrderBuyerInfo");
      }

      let pathParams = {
        'campaignId': campaignId,
        'orderId': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrderBuyerInfoResponse;
      return this.apiClient.callApi(
        '/campaigns/{campaignId}/orders/{orderId}/buyer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setOrderDeliveryDate operation.
     * @callback module:api/OrderDeliveryApi~setOrderDeliveryDateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmptyApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Изменение даты доставки заказа
     * {% include notitle [access](../../_auto/method_scopes/setOrderDeliveryDate.md) %}  Метод изменяет дату доставки заказа в статусе `PROCESSING` или `DELIVERY`. Для заказов с другими статусами дату доставки изменить нельзя.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
     * @param {Number} campaignId Идентификатор магазина в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param {Number} orderId Идентификатор заказа.
     * @param {module:model/SetOrderDeliveryDateRequest} setOrderDeliveryDateRequest 
     * @param {module:api/OrderDeliveryApi~setOrderDeliveryDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmptyApiResponse}
     */
    setOrderDeliveryDate(campaignId, orderId, setOrderDeliveryDateRequest, callback) {
      let postBody = setOrderDeliveryDateRequest;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling setOrderDeliveryDate");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling setOrderDeliveryDate");
      }
      // verify the required parameter 'setOrderDeliveryDateRequest' is set
      if (setOrderDeliveryDateRequest === undefined || setOrderDeliveryDateRequest === null) {
        throw new Error("Missing the required parameter 'setOrderDeliveryDateRequest' when calling setOrderDeliveryDate");
      }

      let pathParams = {
        'campaignId': campaignId,
        'orderId': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmptyApiResponse;
      return this.apiClient.callApi(
        '/campaigns/{campaignId}/orders/{orderId}/delivery/date', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setOrderDeliveryTrackCode operation.
     * @callback module:api/OrderDeliveryApi~setOrderDeliveryTrackCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmptyApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Передача трек‑номера посылки
     * {% include notitle [access](../../_auto/method_scopes/setOrderDeliveryTrackCode.md) %}  Передает Маркету трек‑номер, по которому покупатель может отследить посылку со своим заказом через службу доставки. Если покупатели смогут узнать, на каком этапе доставки находятся их заказы, доверие покупателей к вашему магазину может возрасти.  Передать трек‑номер можно, только если заказ находится в статусе `PROCESSING`, `DELIVERY` или `PICKUP`.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
     * @param {Number} campaignId Идентификатор магазина в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param {Number} orderId Идентификатор заказа.
     * @param {module:model/SetOrderDeliveryTrackCodeRequest} setOrderDeliveryTrackCodeRequest 
     * @param {module:api/OrderDeliveryApi~setOrderDeliveryTrackCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmptyApiResponse}
     */
    setOrderDeliveryTrackCode(campaignId, orderId, setOrderDeliveryTrackCodeRequest, callback) {
      let postBody = setOrderDeliveryTrackCodeRequest;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling setOrderDeliveryTrackCode");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling setOrderDeliveryTrackCode");
      }
      // verify the required parameter 'setOrderDeliveryTrackCodeRequest' is set
      if (setOrderDeliveryTrackCodeRequest === undefined || setOrderDeliveryTrackCodeRequest === null) {
        throw new Error("Missing the required parameter 'setOrderDeliveryTrackCodeRequest' when calling setOrderDeliveryTrackCode");
      }

      let pathParams = {
        'campaignId': campaignId,
        'orderId': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmptyApiResponse;
      return this.apiClient.callApi(
        '/campaigns/{campaignId}/orders/{orderId}/delivery/track', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrderStorageLimit operation.
     * @callback module:api/OrderDeliveryApi~updateOrderStorageLimitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmptyApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Продление срока хранения заказа
     * {% include notitle [access](../../_auto/method_scopes/updateOrderStorageLimit.md) %}  Продлевает срок хранения заказа в пункте выдачи продавца.  Заказ должен быть в статусе `PICKUP`. Продлить срок можно только один раз, не больше чем на 30 дней.  Новый срок хранения можно получить в параметре `outletStorageLimitDate` запроса [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
     * @param {Number} campaignId Идентификатор магазина в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param {Number} orderId Идентификатор заказа.
     * @param {module:model/UpdateOrderStorageLimitRequest} updateOrderStorageLimitRequest 
     * @param {module:api/OrderDeliveryApi~updateOrderStorageLimitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmptyApiResponse}
     */
    updateOrderStorageLimit(campaignId, orderId, updateOrderStorageLimitRequest, callback) {
      let postBody = updateOrderStorageLimitRequest;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling updateOrderStorageLimit");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling updateOrderStorageLimit");
      }
      // verify the required parameter 'updateOrderStorageLimitRequest' is set
      if (updateOrderStorageLimitRequest === undefined || updateOrderStorageLimitRequest === null) {
        throw new Error("Missing the required parameter 'updateOrderStorageLimitRequest' when calling updateOrderStorageLimit");
      }

      let pathParams = {
        'campaignId': campaignId,
        'orderId': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmptyApiResponse;
      return this.apiClient.callApi(
        '/campaigns/{campaignId}/orders/{orderId}/delivery/storage-limit', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyOrderEac operation.
     * @callback module:api/OrderDeliveryApi~verifyOrderEacCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifyOrderEacResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Передача кода подтверждения
     * {% include notitle [access](../../_auto/method_scopes/verifyOrderEac.md) %}  Отправляет Маркету код подтверждения для его проверки.  **Если у магазина настроена работа с кодами подтверждения:**    В запросах [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md), [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md), [PUT campaigns/{campaignId}/orders/{orderId}/status](../../reference/orders/updateOrderStatus.md) в параметре `delivery`, вложенном в `order`, возвращается параметр `eacType` с типом `Enum` — тип кода подтверждения для передачи заказа.    Возможные значения:    * `MERCHANT_TO_COURIER` (временно не возвращается) — продавец передает код курьеру для получения невыкупа;   * `COURIER_TO_MERCHANT` — курьер передает код продавцу для получения заказа.    Параметр `eacType` возвращается при статусах заказа `COURIER_FOUND`, `COURIER_ARRIVED_TO_SENDER` и `DELIVERY_SERVICE_UNDELIVERED`. Если заказ в других статусах, параметр может отсутствовать.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
     * @param {Number} campaignId Идентификатор магазина в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param {Number} orderId Идентификатор заказа.
     * @param {module:model/VerifyOrderEacRequest} verifyOrderEacRequest 
     * @param {module:api/OrderDeliveryApi~verifyOrderEacCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerifyOrderEacResponse}
     */
    verifyOrderEac(campaignId, orderId, verifyOrderEacRequest, callback) {
      let postBody = verifyOrderEacRequest;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling verifyOrderEac");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling verifyOrderEac");
      }
      // verify the required parameter 'verifyOrderEacRequest' is set
      if (verifyOrderEacRequest === undefined || verifyOrderEacRequest === null) {
        throw new Error("Missing the required parameter 'verifyOrderEacRequest' when calling verifyOrderEac");
      }

      let pathParams = {
        'campaignId': campaignId,
        'orderId': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VerifyOrderEacResponse;
      return this.apiClient.callApi(
        '/campaigns/{campaignId}/orders/{orderId}/verifyEac', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
