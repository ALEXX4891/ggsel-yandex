/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RegionDTO from './RegionDTO';

/**
 * The CountryDTO model module.
 * @module model/CountryDTO
 * @version LATEST
 */
class CountryDTO {
    /**
     * Constructs a new <code>CountryDTO</code>.
     * Страна и ее код в формате ISO 3166-1 alpha-2.
     * @alias module:model/CountryDTO
     * @param region {module:model/RegionDTO} 
     * @param countryCode {String} Страна производства в формате ISO 3166-1 alpha-2. [Как получить](../../reference/regions/getRegionsCodes.md) 
     */
    constructor(region, countryCode) { 
        
        CountryDTO.initialize(this, region, countryCode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, region, countryCode) { 
        obj['region'] = region;
        obj['countryCode'] = countryCode;
    }

    /**
     * Constructs a <code>CountryDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CountryDTO} obj Optional instance to populate.
     * @return {module:model/CountryDTO} The populated <code>CountryDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CountryDTO();

            if (data.hasOwnProperty('region')) {
                obj['region'] = RegionDTO.constructFromObject(data['region']);
            }
            if (data.hasOwnProperty('countryCode')) {
                obj['countryCode'] = ApiClient.convertToType(data['countryCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CountryDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CountryDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CountryDTO.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `region`
        if (data['region']) { // data not null
          RegionDTO.validateJSON(data['region']);
        }
        // ensure the json data is a string
        if (data['countryCode'] && !(typeof data['countryCode'] === 'string' || data['countryCode'] instanceof String)) {
            throw new Error("Expected the field `countryCode` to be a primitive type in the JSON string but got " + data['countryCode']);
        }

        return true;
    }


}

CountryDTO.RequiredProperties = ["region", "countryCode"];

/**
 * @member {module:model/RegionDTO} region
 */
CountryDTO.prototype['region'] = undefined;

/**
 * Страна производства в формате ISO 3166-1 alpha-2. [Как получить](../../reference/regions/getRegionsCodes.md) 
 * @member {String} countryCode
 */
CountryDTO.prototype['countryCode'] = undefined;






export default CountryDTO;

