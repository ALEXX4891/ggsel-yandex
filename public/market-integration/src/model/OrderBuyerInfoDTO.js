/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrderBuyerBasicInfoDTO from './OrderBuyerBasicInfoDTO';
import OrderBuyerType from './OrderBuyerType';

/**
 * The OrderBuyerInfoDTO model module.
 * @module model/OrderBuyerInfoDTO
 * @version LATEST
 */
class OrderBuyerInfoDTO {
    /**
     * Constructs a new <code>OrderBuyerInfoDTO</code>.
     * Информация о покупателе и его номере телефона.
     * @alias module:model/OrderBuyerInfoDTO
     * @implements module:model/OrderBuyerBasicInfoDTO
     * @param type {module:model/OrderBuyerType} 
     */
    constructor(type) { 
        OrderBuyerBasicInfoDTO.initialize(this, type);
        OrderBuyerInfoDTO.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['type'] = type;
    }

    /**
     * Constructs a <code>OrderBuyerInfoDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderBuyerInfoDTO} obj Optional instance to populate.
     * @return {module:model/OrderBuyerInfoDTO} The populated <code>OrderBuyerInfoDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderBuyerInfoDTO();
            OrderBuyerBasicInfoDTO.constructFromObject(data, obj);

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('middleName')) {
                obj['middleName'] = ApiClient.convertToType(data['middleName'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = OrderBuyerType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('trusted')) {
                obj['trusted'] = ApiClient.convertToType(data['trusted'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderBuyerInfoDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderBuyerInfoDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OrderBuyerInfoDTO.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['middleName'] && !(typeof data['middleName'] === 'string' || data['middleName'] instanceof String)) {
            throw new Error("Expected the field `middleName` to be a primitive type in the JSON string but got " + data['middleName']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }

        return true;
    }


}

OrderBuyerInfoDTO.RequiredProperties = ["type"];

/**
 * Идентификатор покупателя.
 * @member {String} id
 */
OrderBuyerInfoDTO.prototype['id'] = undefined;

/**
 * Фамилия покупателя.
 * @member {String} lastName
 */
OrderBuyerInfoDTO.prototype['lastName'] = undefined;

/**
 * Имя покупателя.
 * @member {String} firstName
 */
OrderBuyerInfoDTO.prototype['firstName'] = undefined;

/**
 * Отчество покупателя.
 * @member {String} middleName
 */
OrderBuyerInfoDTO.prototype['middleName'] = undefined;

/**
 * @member {module:model/OrderBuyerType} type
 */
OrderBuyerInfoDTO.prototype['type'] = undefined;

/**
 * Подменный номер телефона покупателя. Подробнее о таких номерах читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/orders/dbs/call#fake-number).  Формат номера: `+<код_страны><код_региона><номер_телефона>`. 
 * @member {String} phone
 */
OrderBuyerInfoDTO.prototype['phone'] = undefined;

/**
 * Проверенный покупатель.  Если параметр `trusted` вернулся со значением `true`, Маркет уже проверил покупателя — не звоните ему. Обработайте заказ как обычно и передайте его курьеру или отвезите в ПВЗ.  При необходимости свяжитесь с покупателем в чате. [Как это сделать](../../step-by-step/chats.md)  Подробнее о звонках покупателю читайте [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/ru/orders/dbs/call). 
 * @member {Boolean} trusted
 */
OrderBuyerInfoDTO.prototype['trusted'] = undefined;


// Implement OrderBuyerBasicInfoDTO interface:
/**
 * Идентификатор покупателя.
 * @member {String} id
 */
OrderBuyerBasicInfoDTO.prototype['id'] = undefined;
/**
 * Фамилия покупателя.
 * @member {String} lastName
 */
OrderBuyerBasicInfoDTO.prototype['lastName'] = undefined;
/**
 * Имя покупателя.
 * @member {String} firstName
 */
OrderBuyerBasicInfoDTO.prototype['firstName'] = undefined;
/**
 * Отчество покупателя.
 * @member {String} middleName
 */
OrderBuyerBasicInfoDTO.prototype['middleName'] = undefined;
/**
 * @member {module:model/OrderBuyerType} type
 */
OrderBuyerBasicInfoDTO.prototype['type'] = undefined;




export default OrderBuyerInfoDTO;

