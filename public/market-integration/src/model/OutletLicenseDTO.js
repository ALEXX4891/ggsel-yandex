/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LicenseType from './LicenseType';

/**
 * The OutletLicenseDTO model module.
 * @module model/OutletLicenseDTO
 * @version LATEST
 */
class OutletLicenseDTO {
    /**
     * Constructs a new <code>OutletLicenseDTO</code>.
     * Информация о лицензии.
     * @alias module:model/OutletLicenseDTO
     * @param outletId {Number} Идентификатор точки продаж, для которой действительна лицензия.
     * @param licenseType {module:model/LicenseType} 
     * @param number {String} Номер лицензии.
     * @param dateOfIssue {Date} Дата выдачи лицензии.  Формат даты: ISO 8601 со смещением относительно UTC. Нужно передать дату, указанную на лицензии, время `00:00:00` и часовой пояс, соответствующий региону точки продаж. Например, если лицензия для точки продаж в Москве выдана 13 ноября 2017 года, то параметр должен иметь значение `2017-11-13T00:00:00+03:00`.  Не может быть позже даты окончания срока действия, указанной в параметре `dateOfExpiry`. 
     * @param dateOfExpiry {Date} Дата окончания действия лицензии.  Формат даты: ISO 8601 со смещением относительно UTC. Нужно передать дату, указанную на лицензии, время `00:00:00` и часовой пояс, соответствующий региону точки продаж. Например, если действие лицензии для точки продаж в Москве заканчивается 20 ноября 2022 года, то параметр должен иметь значение `2022-11-20T00:00:00+03:00`.  Не может быть раньше даты выдачи, указанной в параметре `dateOfIssue`. 
     */
    constructor(outletId, licenseType, number, dateOfIssue, dateOfExpiry) { 
        
        OutletLicenseDTO.initialize(this, outletId, licenseType, number, dateOfIssue, dateOfExpiry);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, outletId, licenseType, number, dateOfIssue, dateOfExpiry) { 
        obj['outletId'] = outletId;
        obj['licenseType'] = licenseType;
        obj['number'] = number;
        obj['dateOfIssue'] = dateOfIssue;
        obj['dateOfExpiry'] = dateOfExpiry;
    }

    /**
     * Constructs a <code>OutletLicenseDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OutletLicenseDTO} obj Optional instance to populate.
     * @return {module:model/OutletLicenseDTO} The populated <code>OutletLicenseDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OutletLicenseDTO();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('outletId')) {
                obj['outletId'] = ApiClient.convertToType(data['outletId'], 'Number');
            }
            if (data.hasOwnProperty('licenseType')) {
                obj['licenseType'] = LicenseType.constructFromObject(data['licenseType']);
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'String');
            }
            if (data.hasOwnProperty('dateOfIssue')) {
                obj['dateOfIssue'] = ApiClient.convertToType(data['dateOfIssue'], 'Date');
            }
            if (data.hasOwnProperty('dateOfExpiry')) {
                obj['dateOfExpiry'] = ApiClient.convertToType(data['dateOfExpiry'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OutletLicenseDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OutletLicenseDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OutletLicenseDTO.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['number'] && !(typeof data['number'] === 'string' || data['number'] instanceof String)) {
            throw new Error("Expected the field `number` to be a primitive type in the JSON string but got " + data['number']);
        }

        return true;
    }


}

OutletLicenseDTO.RequiredProperties = ["outletId", "licenseType", "number", "dateOfIssue", "dateOfExpiry"];

/**
 * Идентификатор лицензии.  Параметр указывается, только если нужно изменить информацию о существующей лицензии. Ее идентификатор можно узнать с помощью запроса [GET campaigns/{campaignId}/outlets/licenses](../../reference/outlets/getOutletLicenses.md). При передаче информации о новой лицензии указывать идентификатор не нужно.  Идентификатор лицензии присваивается Маркетом. Не путайте его с номером, указанным на лицензии: он передается в параметре `number`. 
 * @member {Number} id
 */
OutletLicenseDTO.prototype['id'] = undefined;

/**
 * Идентификатор точки продаж, для которой действительна лицензия.
 * @member {Number} outletId
 */
OutletLicenseDTO.prototype['outletId'] = undefined;

/**
 * @member {module:model/LicenseType} licenseType
 */
OutletLicenseDTO.prototype['licenseType'] = undefined;

/**
 * Номер лицензии.
 * @member {String} number
 */
OutletLicenseDTO.prototype['number'] = undefined;

/**
 * Дата выдачи лицензии.  Формат даты: ISO 8601 со смещением относительно UTC. Нужно передать дату, указанную на лицензии, время `00:00:00` и часовой пояс, соответствующий региону точки продаж. Например, если лицензия для точки продаж в Москве выдана 13 ноября 2017 года, то параметр должен иметь значение `2017-11-13T00:00:00+03:00`.  Не может быть позже даты окончания срока действия, указанной в параметре `dateOfExpiry`. 
 * @member {Date} dateOfIssue
 */
OutletLicenseDTO.prototype['dateOfIssue'] = undefined;

/**
 * Дата окончания действия лицензии.  Формат даты: ISO 8601 со смещением относительно UTC. Нужно передать дату, указанную на лицензии, время `00:00:00` и часовой пояс, соответствующий региону точки продаж. Например, если действие лицензии для точки продаж в Москве заканчивается 20 ноября 2022 года, то параметр должен иметь значение `2022-11-20T00:00:00+03:00`.  Не может быть раньше даты выдачи, указанной в параметре `dateOfIssue`. 
 * @member {Date} dateOfExpiry
 */
OutletLicenseDTO.prototype['dateOfExpiry'] = undefined;






export default OutletLicenseDTO;

